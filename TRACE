BEGIN EXPERIMENTAL
0x7fa7ace1de40:ScalarMemory(0, int, time, 4294967295)

0x7fa7ace19f10:0x7fa7ace1de40:int time = 1 + time;
0x7fa7ace1c720:ScalarMemory(2, int, VI0, 4294967295)

0x7fa7ace1c270:0x7fa7ace1c720:int VI0 = time & 1023;
0x7fa7ace1e020:ScalarMemory(2, float, input0[i], 4294967295)

0x7fa7ace1e380:0x7fa7ace1c860:float[1024] RF0[VI0] = input0[i] + RF0[time - 1001 & 1023];
0x7fa7ace1e510:ScalarMemory(2, float, output0[i], 4294967295)

0x7fa7ace1e610:0x7fa7ace1e510:float output0[i] = RF0[VI0];
============================================
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
Instruction 
0x7fa7ace19f10:0x7fa7ace1de40:int time = 1 + time; provides memories: 0x7fa7ace1de40:int time; 
Memory 0x7fa7ace1de40:int time is provided by 
0x7fa7ace19f10:0x7fa7ace1de40:int time = 1 + time;
Instruction 
0x7fa7ace1c270:0x7fa7ace1c720:int VI0 = time & 1023; provides memories: 0x7fa7ace1c720:int VI0; 
Memory 0x7fa7ace1c720:int VI0 is provided by 
0x7fa7ace1c270:0x7fa7ace1c720:int VI0 = time & 1023;
Instruction 
0x7fa7ace1e380:0x7fa7ace1c860:float[1024] RF0[VI0] = input0[i] + RF0[time - 1001 & 1023]; provides memories: 0x7fa7ace1c860:float[1024] RF0; 
Memory 0x7fa7ace1c860:float[1024] RF0 is provided by 
0x7fa7ace1e380:0x7fa7ace1c860:float[1024] RF0[VI0] = input0[i] + RF0[time - 1001 & 1023];
Instruction 
0x7fa7ace1e610:0x7fa7ace1e510:float output0[i] = RF0[VI0]; provides memories: 0x7fa7ace1e510:float output0[i]; 
Memory 0x7fa7ace1e510:float output0[i] is provided by 
0x7fa7ace1e610:0x7fa7ace1e510:float output0[i] = RF0[VI0];

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
Instruction 
0x7fa7ace19f10:0x7fa7ace1de40:int time = 1 + time; depends on: 0x7fa7ace1de40:int time@1; provided by: 
0x7fa7ace19f10:0x7fa7ace1de40:int time = 1 + time;

--------------------------------------- 

G.add(
0x7fa7ace19f10:0x7fa7ace1de40:int time = 1 + time; --time@1--> 
0x7fa7ace19f10:0x7fa7ace1de40:int time = 1 + time;)

Instruction 
0x7fa7ace1c270:0x7fa7ace1c720:int VI0 = time & 1023; depends on: 0x7fa7ace1de40:int time@0; provided by: 
0x7fa7ace19f10:0x7fa7ace1de40:int time = 1 + time;

--------------------------------------- 

G.add(
0x7fa7ace1c270:0x7fa7ace1c720:int VI0 = time & 1023; --time@0--> 
0x7fa7ace19f10:0x7fa7ace1de40:int time = 1 + time;)

Instruction 
0x7fa7ace1e380:0x7fa7ace1c860:float[1024] RF0[VI0] = input0[i] + RF0[time - 1001 & 1023]; depends on: 0x7fa7ace1de40:int time@0; provided by: 
0x7fa7ace19f10:0x7fa7ace1de40:int time = 1 + time;
0x7fa7ace1df60:float[123456] RF0@1001; provided by: NOT FOUND
0x7fa7ace1e020:float input0[i]@0; provided by: NOT FOUND

--------------------------------------- 

G.add(
0x7fa7ace1e380:0x7fa7ace1c860:float[1024] RF0[VI0] = input0[i] + RF0[time - 1001 & 1023]; --time@0--> 
0x7fa7ace19f10:0x7fa7ace1de40:int time = 1 + time;)

Instruction 
0x7fa7ace1e610:0x7fa7ace1e510:float output0[i] = RF0[VI0]; depends on: 0x7fa7ace1c720:int VI0@0; provided by: 
0x7fa7ace1c270:0x7fa7ace1c720:int VI0 = time & 1023;
0x7fa7ace1df60:float[123456] RF0@0; provided by: NOT FOUND

--------------------------------------- 

G.add(
0x7fa7ace1e610:0x7fa7ace1e510:float output0[i] = RF0[VI0]; --VI0@0--> 
0x7fa7ace1c270:0x7fa7ace1c720:int VI0 = time & 1023;)

--------------------------------------- 
--------------------------------------- 
graph Graph {
0x7fa7ace19f10:0x7fa7ace1de40:int time = 1 + time;-std::pair{std::map{std::pair{time, 1}}, 1}->
0x7fa7ace19f10:0x7fa7ace1de40:int time = 1 + time;, 
0x7fa7ace1c270:0x7fa7ace1c720:int VI0 = time & 1023;-std::pair{std::map{std::pair{time, 0}}, 0}->
0x7fa7ace19f10:0x7fa7ace1de40:int time = 1 + time;, 
0x7fa7ace1e380:0x7fa7ace1c860:float[1024] RF0[VI0] = input0[i] + RF0[time - 1001 & 1023];-std::pair{std::map{std::pair{time, 0}}, 0}->
0x7fa7ace19f10:0x7fa7ace1de40:int time = 1 + time;, 
0x7fa7ace1e610:0x7fa7ace1e510:float output0[i] = RF0[VI0];-std::pair{std::map{std::pair{VI0, 0}}, 0}->
0x7fa7ace1c270:0x7fa7ace1c720:int VI0 = time & 1023;}
--------------------------------------- 
--------------------------------------- 
schedule Schedule {1:
0x7fa7ace19f10:0x7fa7ace1de40:int time = 1 + time;, 2:
0x7fa7ace1e380:0x7fa7ace1c860:float[1024] RF0[VI0] = input0[i] + RF0[time - 1001 & 1023];, 3:
0x7fa7ace1c270:0x7fa7ace1c720:int VI0 = time & 1023;, 4:
0x7fa7ace1e610:0x7fa7ace1e510:float output0[i] = RF0[VI0];}
END EXPERIMENTAL
